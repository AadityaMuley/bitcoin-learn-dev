To run the collection of JS files (assuming you have nodejs and npm pre-installed):

1. create a folder with a name of your choice:
    mkdir bchain-learn

2. navigate to that folder:
    cd bchain-learn

3. use npm to create package,jason file which will have details about the project (-y answers yes to all interactive questions on terminal):
    npm init -y

4. install development dependancy - nodemon. nodemon along with npm capabilities has inbuilt live server capabilities which completely
   reloads and restarts our project when we make any changes:
    npm i nodemon --save-dev

5. add this line to package.json script after putting a comma (since name of file is dev-test.js):
    "dev-test": "nodemon dev-test"

6. to run the the development server:
    npm run dev-test

6. Add crypto-js module to npm which has SHA-256 algorithm prebuilt:
    npm - crypto-js --save

7. install test runner - jest(executes testing files in JS project. it looks for testing files with test.js extension - we have created block.test.js):
    npm i jest --save-dev

8. run jest testing:
    npm run test

9. Add the express module to npm which is required to build our API:
    npm i express  --save

10. run the express app on default port 3001:
    npm run dev
    run the express app on custom port:
    HTTP_PORT=*MENTION PORT NUMBER* npm run dev

11. Install Postman according to your Operating System - Google it if you are unfamiliar - run the follwing GET request and press send (ensure step 10 is running in the baground):
    localhost:3001/blocks

12. Add body parser module - it has middleware function which allows us to receive JSON data within POST request in our express app from the users who create those post requests
    npm i body-parser --save

13. Goto Postman and do the following:
    a. add a new POST request tab
    b. enter request URL: localhost:3001/mine
    c. goto Body (below request URL)
    d. click on raw
    e. select file format as "JSON" from the dropdown menu
    f. add the data:
        {
            "data": "random-1"
        }

14. Add the websocket module - ws which is requierd to run multiple server instances:
    npm i ws --save

15. To run multiple blockchain instances after setting up peer-to-peer network using websockets open 3 terminals:
    a. Terminal 1: npm run dev
    b. Terminal 2: HTTP_PORT=3002 P2P_PORT=5002 PEERS=ws://localhost:5001 npm run dev
    c. Terminal 3: HTTP_PORT=3003 P2P_PORT=5003 PEERS=ws://localhost:5001,ws://localhost:5002 npm run dev
